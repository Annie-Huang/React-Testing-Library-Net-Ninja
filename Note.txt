React Testing Library Tutorial
(https://www.youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ)

https://github.com/harblaith7/React-Testing-Library-Net-Ninja
https://github.com/Annie-Huang/React-Testing-Library-Net-Ninja

https://testing-library.com/docs/react-testing-library/intro/

https://www.youtube.com/watch?v=PLL5Pvuk-tw
################################################################################################

C:\react\React-Testing-Library-Net-Ninja> npm install
C:\react\React-Testing-Library-Net-Ninja\src\components\Header\__test__\Header.test.js

################################################################################################

getBy cannot used for async awake.
findBy can used for async awake.
queryBy return null (rather than throwing an error). So if you want to test the lack of existence of a element, use queryBy.
Similar matching fro getAllBy vs findAllBy vs queryAllBy

----- Accessible by everyone -------------
getByRole		(more preferable, get by heading (h1,h2,h3 etc))
getByLabelText
getByPlaceholderText
getByText
------ Semantic Queries ---------
getByAltText
getByTitle
------- Test ID ----------
getByTestId		(least preferable)



====================================================================

  render(<Header title='My Header'/>);
  const headingElement = screen.getByText(/my header/i); // it's regex so can be small letters
  expect(headingElement).toBeInTheDocument();


    <>
      <h1 className='header' data-testid='header-1'>
        {title}
      </h1>
      <h3 title='Header' className='header'>
        Cat
      </h3>
    </>
  const headingElement = screen.getByRole('heading');				<< Will failed if there are multiple elements.
  const headingElement = screen.getByRole('heading', {name: 'My Header'});	<< name property is the text content:
  const headingElement = screen.getByRole('paragraph');

  const headingElement = screen.getByTitle('Header');
  const headingElement = screen.getByTestId('header-1');

---------------------

findByText need to use async await while getByTest doesn't:

  test('should render same text passed into title prop', () => {
    render(<Header title='My Header' />);
    const headingElement = screen.getByTestId('header-1');
    expect(headingElement).toBeInTheDocument();
  });

  // FIND BY
  test('should render same text passed into title prop', async () => {
    render(<Header title='My Header' />);
    const headingElement = await screen.findByText(/my header/i);
    expect(headingElement).toBeInTheDocument();
  });

  // QUERY BY
  test('should render same text passed into title prop', () => {
    render(<Header title='My Header' />);
    const headingElement = screen.queryByText(/dogs/i);
    expect(headingElement).not.toBeInTheDocument();
  });

  test('should render same text passed into title prop', () => {
    render(<Header title='My Header' />);
    const headingElements = screen.getAllByRole('heading');
    expect(headingElements.length).toBe(2);
  });








