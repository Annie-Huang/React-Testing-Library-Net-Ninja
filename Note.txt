React Testing Library Tutorial
(https://www.youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ)

https://github.com/harblaith7/React-Testing-Library-Net-Ninja
https://github.com/Annie-Huang/React-Testing-Library-Net-Ninja

https://testing-library.com/docs/react-testing-library/intro/

https://www.youtube.com/watch?v=TBZy-Rc-xX0
################################################################################################

C:\react\React-Testing-Library-Net-Ninja> npm install

5 Test files we created in this tutorial:
C:\react\React-Testing-Library-Net-Ninja\src\components\Header\__test__\Header.test.js
C:\react\React-Testing-Library-Net-Ninja\src\components\TodoFooter\__test__\TodoFooter.test.js
C:\react\React-Testing-Library-Net-Ninja\src\components\AddInput\__test__\AddInput.test.js
C:\react\React-Testing-Library-Net-Ninja\src\components\Todo\__test__\Todo.test.js
C:\react\React-Testing-Library-Net-Ninja\src\components\FollowersList\__test__\FollowersList.test.js

################################################################################################

getBy cannot used for async awake.
findBy can used for async awake.
queryBy return null (rather than throwing an error). So if you want to test the lack of existence of a element, use queryBy.
Similar matching fro getAllBy vs findAllBy vs queryAllBy

----- Accessible by everyone -------------
getByRole		(more preferable, get by heading (h1,h2,h3 etc))
getByLabelText
getByPlaceholderText
getByText
------ Semantic Queries ---------
getByAltText
getByTitle
------- Test ID ----------
getByTestId		(least preferable)



====================================================================
--------------------
-- Get elements: ---
--------------------

  render(<Header title='My Header'/>);
  const headingElement = screen.getByText(/my header/i); // it's regex so can be small letters
  expect(headingElement).toBeInTheDocument();


    <>
      <h1 className='header' data-testid='header-1'>
        {title}
      </h1>
      <h3 title='Header' className='header'>
        Cat
      </h3>
    </>
  const headingElement = screen.getByRole('heading');				<< Will failed if there are multiple elements.
  const headingElement = screen.getByRole('heading', {name: 'My Header'});	<< name property is the text content:
  const headingElement = screen.getByRole('paragraph');
  const buttonElement = screen.getByRole('button', { name: /Add/i });

  const headingElement = screen.getByTitle('Header');
  const headingElement = screen.getByTestId('header-1');
  const followerDivElement = await screen.findByTestId('follower-item-0');
  const followerDivElements = await screen.findAllByTestId(/follower-item/i);
  const divElements = screen.getAllByTestId('task-container');

  const inputElement = screen.getByPlaceholderText(/Add a new task here.../i);

--------------------
-- Assertions    ---
--------------------
  You can just do the expect(xxx). and then the intellij will promp you all the choices of options

  expect(headingElement).toBeInTheDocument();
  expect(headingElement).not.toBeInTheDocument();
  expect(paragraphElement).toBeTruthy();

  <p style={{opacity: 0}}>{numberOfIncompleteTasks} {numberOfIncompleteTasks === 1 ? "task" : "tasks"} left</p>
  expect(paragraphElement).not.toBeVisible();		<< so even if the element is in the document, but if the styling is set to

  expect(paragraphElement).toContainHTML('p');
  expect(paragraphElement).toContainHTML('h3');
  expect(paragraphElement).toHaveTextContent('1 task left');		<< Text content
  expect(paragraphElement.textContent).toBe('1 task left');
  expect(paragraphElement.value).toBe('1 task left');			<< value can only be get from the <input> element
  expect(divElement).toHaveClass('todo-item-active');


--------------------
-- fire event    ---
--------------------
You can fire the following event, again, just do the fireEvent. and then the intelli will promp you all the choice of options
  change (change the value of the input) |
  blur |
  click |
  copy |
  cut |
  drag |
  doubleClick |
  focus |
  keyUp |
  mouseOver (is this === hover?) |
  mouseLeave


    const mockedSetTodo = jest.fn();
    render(<AddInput todos={[]} setTodos={mockedSetTodo} />);
    const inputElement = screen.getByPlaceholderText(/Add a new task here.../i);
    const buttonElement = screen.getByRole('button', { name: /Add/i });

    fireEvent.change(inputElement, {			<<< Need to d change event on target.value, which is just like type into input field.
      target: { value: 'Go Grocery Shopping' },
    });
    expect(inputElement.value).toBe('Go Grocery Shopping');
    fireEvent.click(buttonElement);
    expect(inputElement.value).toBe('');



------------------------------------
-- Other testing library method  ---
------------------------------------
  import {render, cleanup, waitForElement} from "@testing-library/react";

    beforeEach(cleanup);
    await waitForElement(() => [
        expect(getByText('Hacker News Stories')).toBeTruthy(),
        expect(getByText('Tarnished: Google Responds')).toBeTruthy(),
        expect(queryByTestId('story-by').textContent).toEqual('By: Karl Hadwen')
    ]);


-------------------------------------------------------------

--------------------------------------
-- async await (getBy vs findBy)   ---
--------------------------------------

findByText need to use async await while getByTest doesn't:

  test('should render same text passed into title prop', () => {
    render(<Header title='My Header' />);
    const headingElement = screen.getByTestId('header-1');
    expect(headingElement).toBeInTheDocument();
  });

  // FIND BY
  test('should render same text passed into title prop', async () => {
    render(<Header title='My Header' />);
    const headingElement = await screen.findByText(/my header/i);
    expect(headingElement).toBeInTheDocument();
  });

  describe('FollowersList', () => {
    it('should render same text passed into title prop', async () => {		<<< Remember to put async here..
      render(<MockFollowersList />);
      const followerDivElement = await screen.findByTestId('follower-item-0'); // it's regex so can be small letters
      expect(followerDivElement).toBeInTheDocument();
    });
  });

  // QUERY BY
  test('should render same text passed into title prop', () => {
    render(<Header title='My Header' />);
    const headingElement = screen.queryByText(/dogs/i);
    expect(headingElement).not.toBeInTheDocument();
  });

  test('should render same text passed into title prop', () => {
    render(<Header title='My Header' />);
    const headingElements = screen.getAllByRole('heading');
    expect(headingElements.length).toBe(2);
  });




---------------------------------------------
-- When your component got <Link> in it   ---
---------------------------------------------

If your element got <Link> from react-router-dom:
        <div className="todo-footer">
            <p>{numberOfIncompleteTasks} {numberOfIncompleteTasks === 1 ? "task" : "tasks"} left</p>
            <Link to="/followers">Followers</Link>
        </div>

You will generally get this error: Invariant failed: You should not use <Link> outside a <Router>
You will need to create a mock wrapper to contain the component for testing:

const MockTodoFooter = ({ numberOfIncompleteTasks }) => (
    <BrowserRouter>
      <TodoFooter numberOfIncompleteTasks={numberOfIncompleteTasks} />
    </BrowserRouter>
  );

  test('should render the correct amount of incomplete tasks', () => {
    render(<MockTodoFooter numberOfIncompleteTasks={5} />);
    const paragraphElement = screen.getByText(/5 tasks left/i); // it's regex so can be small letters
    expect(paragraphElement).toBeInTheDocument();
  });









